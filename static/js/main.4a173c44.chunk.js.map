{"version":3,"sources":["components/akita/todo/todo.model.ts","components/chooser/index.tsx","components/akita/todo/todo.store.ts","components/akita/todo/todo.service.ts","components/akita/todo/todo.query.ts","components/akita/todo/add.tsx","components/common/goback.tsx","components/akita/todo/item.tsx","components/akita/todo/index.tsx","components/context/todo/context.tsx","components/common/emptyList.tsx","components/context/todo/item.tsx","components/context/todo/list.tsx","components/context/todo/index.tsx","components/drilling/todo/item.tsx","components/drilling/todo/list.tsx","components/drilling/todo/index.tsx","components/recoil/todo/add.tsx","components/recoil/todo/item.tsx","components/recoil/todo/list.tsx","components/recoil/todo/index.tsx","components/redux/todo/reducer.tsx","components/redux/todo/add.tsx","components/redux/todo/item.tsx","components/redux/todo/list.tsx","components/redux/todo/index.tsx","App.tsx","index.tsx"],"names":["VISIBILITY_FILTER","Chooser","to","className","initialState","filter","SHOW_ALL","list","todosStore","createEntityStore","name","addTodo","text","todo","id","guid","isCompleted","createTodo","add","todosQuery","createEntityQuery","selectVisibilityFilter$","select","state","selectVisibleTodos","combineLatest","selectAll","todos","t","Add","onAdd","useState","newTodo","setNewTodo","onSubmit","e","preventDefault","value","onChange","event","currentTarget","placeholder","type","GoBack","style","margin","Item","props","elem","display","justifyContent","alignItems","borderBottom","update","entity","checked","onClick","remove","TodoApp","setTodos","useEffect","subscribe","unsubscribe","map","todosService","manageTodo","action","length","Math","max","apply","o","title","push","el","cloneState","currentTask","find","TodoContext","createContext","dispatch","EmptyList","flexDirection","height","actionDispatch","List","todoList","useContext","storage","localStorage","getItem","initial","JSON","parse","Todo","useReducer","setItem","stringify","Provider","removeTask","setCompletedTask","setTodoList","filtered","newVal","cloneList","addNewTodo","useRecoilValue","todoListState","useSetRecoilState","newItem","useRecoilState","index","findIndex","changedTodo","newList","arr","newValue","slice","replaceItemAtIndex","atom","key","default","createAction","removeTodo","completeTodo","todosReducer","createReducer","rootReducer","combineReducers","store","configureStore","reducer","useDispatch","useSelector","App","basename","process","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a173c44.chunk.js","sourcesContent":["import { guid } from \"@datorama/akita\";\n\nexport type Todo = {\n  id: string;\n  text: string;\n  isCompleted: boolean;\n};\n\nexport function createTodo(text: string): Todo {\n  return {\n    id: guid(),\n    text,\n    isCompleted: false,\n  };\n}\n\nexport enum VISIBILITY_FILTER {\n  SHOW_COMPLETED = \"SHOW_COMPLETED\",\n  SHOW_ACTIVE = \"SHOW_ACTIVE\",\n  SHOW_ALL = \"SHOW_ALL\",\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./style.css\";\n\n/**\n * It directs you to the chosen state management\n */\nconst Chooser = () => {\n    return (\n        <div>\n            <h1>STATE MANAGEMENT</h1>\n            <Link to=\"akita\"><button className=\"blue\">Akita</button></Link>\n            <Link to=\"drilling\"><button className=\"purple\">Drilling component</button></Link>\n            <Link to=\"context\"><button className=\"pink\">React Context</button></Link>\n            <Link to=\"redux\"><button className=\"red\">Redux</button></Link>\n            <Link to=\"recoil\"><button className=\"orange\">Recoil</button></Link>\n        </div>\n    )\n}\n\nexport default Chooser;","import { Todo, VISIBILITY_FILTER } from \"./todo.model\";\nimport { EntityState, createEntityStore } from \"@datorama/akita\";\n\nexport interface TodosState extends EntityState<Todo, string> {\n  filter: VISIBILITY_FILTER;\n}\n\nconst initialState = {\n  filter: VISIBILITY_FILTER.SHOW_ALL,\n  list: [],\n};\n\nexport const todosStore = createEntityStore<TodosState>(initialState, {\n  name: \"todos\",\n});\n","import { todosStore } from \"./todo.store\";\nimport { createTodo, VISIBILITY_FILTER } from \"./todo.model\";\n\nexport function updateTodosFilter(filter: VISIBILITY_FILTER) {\n  todosStore.update({\n    filter,\n  });\n}\n\nexport function toggleTodo(id: string) {\n  todosStore.update(id, (entity) => ({ isCompleted: !entity.isCompleted }));\n}\n\nexport function addTodo(text: string) {\n  const todo = createTodo(text);\n  todosStore.add(todo);\n}\n\nexport function deleteTodo(id: string) {\n  todosStore.remove(id);\n}\n","import { createEntityQuery } from \"@datorama/akita\";\nimport { combineLatest } from \"rxjs\"; // create observable instead of register event listner\n\nimport { TodosState, todosStore } from \"./todo.store\";\nimport { Todo } from \"./todo.model\";\n\nexport const todosQuery = createEntityQuery<TodosState>(todosStore);\n\nexport const selectVisibilityFilter$ = todosQuery.select(\n  (state) => state.filter\n);\n\nexport const selectVisibleTodos = combineLatest(\n  selectVisibilityFilter$,\n  todosQuery.selectAll(),\n  function getVisibleTodos(filter, todos): Todo[] {\n    switch (filter) {\n      case \"SHOW_COMPLETED\":\n        return todos.filter((t) => t.isCompleted);\n      case \"SHOW_ACTIVE\":\n        return todos.filter((t) => !t.isCompleted);\n      default:\n        return todos;\n    }\n  }\n);\n","import React, { useState } from \"react\";\n\ntype AddTodoProps = {\n    onAdd(text: string): void;\n};\n\nconst Add = ({ onAdd }: AddTodoProps) => {\n    const [newTodo, setNewTodo] = useState(\"\");\n\n    return (\n        <form\n            onSubmit={(e) => {\n                e.preventDefault();\n                if (newTodo) {\n                    onAdd(newTodo);\n                    setNewTodo(\"\");\n                }\n            }}\n        >\n            <div className=\"add-section\">\n                <input\n                    value={newTodo}\n                    onChange={(event) => {\n                        setNewTodo(event.currentTarget.value);\n                    }}\n                    className=\"input-add\"\n                    placeholder=\"Add a new todo\"\n                />\n                <button\n                    className=\"green-btn\"\n                    type=\"submit\"\n                >\n                    ADD\n        </button>\n            </div>\n        </form>\n    );\n};\n\nexport default Add;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nconst GoBack: React.FC = () => {\n    return (\n        <Link to=\"/\">\n            <div style={{\n                margin: \"10px 0\"\n            }}>⟵ Back to the state management list</div>\n        </Link>\n    );\n};\n\nexport default GoBack;\n\n","import React from \"react\";\n\nimport { Todo } from \"./todo.model\";\nimport { deleteTodo, toggleTodo } from \"./todo.service\";\n\nconst Item = (props: { elem: Todo }) => {\n    const { elem } = props;\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                borderBottom: \"1px solid #FFF\",\n            }}\n        >\n            <input\n                className=\"task-status\"\n                type=\"checkbox\"\n                onChange={() => toggleTodo(elem.id)}\n                checked={elem.isCompleted}\n            ></input>\n            <label className={\"task-name\" + (elem.isCompleted ? \" complete\" : \"\")}>\n                {elem.text}\n            </label>\n            <button\n                className=\"task-delete\"\n                onClick={() => deleteTodo(elem.id)}\n            ></button>\n        </div>\n    );\n};\n\nexport default Item;\n","import React, { useEffect, useState } from \"react\";\nimport * as todosService from './todo.service';\nimport { selectVisibleTodos } from './todo.query';\nimport { Todo } from \"./todo.model\";\nimport AddTodo from \"./add\";\nimport GoBack from \"../../common/goback\";\n//import List from \"./list\";\n\nimport \"../../../style/style-todo.css\";\nimport Item from \"./item\";\n\nconst TodoApp: React.FC = () => {\n\n    const [todos, setTodos] = useState<Todo[]>([]);\n\n\n    useEffect(() => {\n        // subscribe to home component messages\n        const subscription = selectVisibleTodos.subscribe(list => {\n            if (list) {\n                // add message to local state if not empty\n                setTodos(list);\n            } else {\n                // clear messages when empty message received\n                setTodos([]);\n            }\n        });\n\n        // return unsubscribe method to execute when component unmounts\n        return subscription.unsubscribe;\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <div className=\"flex-todo\">\n                <GoBack />\n                <div className=\"content\">\n                    {(todos as Todo[]).map(todo => (\n                        <Item key={\"todo_\" + todo.id} elem={todo}></Item>\n                    ))}\n                </div>\n                <AddTodo onAdd={todosService.addTodo} />\n            </div>\n        </div >\n    );\n}\n\nexport default TodoApp;\n","import React, { createContext } from \"react\";\n\nexport type Action = { type: \"ADD_TODO\", value: string } | { type: \"REMOVE_TODO\", id: number } | { type: \"COMPLETE_TODO\", id: number };\nexport type Dispatch = (action: Action) => void;\n\nexport interface TodoState {\n    id: number,\n    title: string,\n    isCompleted: boolean\n}\n\nconst TodoContext = createContext<{ state: TodoState[] | [], dispatch: Dispatch }>({ state: [], dispatch: () => { } });\n\nexport const manageTodo = (state: TodoState[], action: Action) => {\n    switch (action.type) {\n        case \"ADD_TODO\": {\n            const newTodo = {\n                id: state.length === 0 ? 1 : Math.max.apply(Math, state.map(function (o) { return o.id; })) + 1,\n                title: action.value,\n                isCompleted: false\n            }\n            state.push(newTodo);\n            return state;\n        }\n        case \"REMOVE_TODO\": {\n            const filtered = state.filter(el => el.id !== action.id)\n            return filtered\n        }\n        case \"COMPLETE_TODO\": {\n            const cloneState = [...state];\n            let currentTask = cloneState.find(el => el.id === action.id);\n            if (currentTask)\n                currentTask[\"isCompleted\"] = !currentTask?.isCompleted;\n\n            return cloneState;\n        }\n        default:\n            return state\n    }\n}\n\nexport default TodoContext;\n","import React from \"react\";\n\nconst EmptyList: React.FC = () => {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                height: \"100%\",\n            }}\n        >\n            <div>NO TASK FOUND</div>\n        </div>\n    );\n};\n\nexport default EmptyList;\n","import React from \"react\";\n\nimport { TodoState, Dispatch } from \"./context\";\n\nconst Item = (props: { elem: TodoState, actionDispatch: Dispatch }) => {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                borderBottom: \"1px solid #FFF\",\n            }}\n        >\n            <input\n                className=\"task-status\"\n                type=\"checkbox\"\n                onChange={() => {\n                    props.actionDispatch({ type: \"COMPLETE_TODO\", id: props.elem.id });\n                }}\n                checked={props.elem.isCompleted}\n            ></input>\n            <label className={\"task-name\" + (props.elem.isCompleted ? \" complete\" : \"\")}>\n                {props.elem.title}\n            </label>\n            <button\n                className=\"task-delete\"\n                onClick={() => {\n                    props.actionDispatch({ type: \"REMOVE_TODO\", id: props.elem.id });\n                }}\n            ></button>\n        </div>\n    );\n};\n\nexport default Item;\n","import React, { useContext } from \"react\";\nimport EmptyList from \"../../common/emptyList\";\nimport Item from \"./item\";\nimport TodoContext, { TodoState } from \"./context\";\n\nconst List = () => {\n  const todoList = useContext(TodoContext);\n\n  return (\n    <div className=\"content\">\n      {(todoList.state as TodoState[]).map((el: TodoState) => {\n        return (<Item elem={el} actionDispatch={todoList.dispatch} />)\n      })}\n\n      {todoList.state.length === 0 && <EmptyList />}\n    </div>\n  );\n};\n\nexport default List;\n","import React, { useEffect, useReducer, useState } from \"react\";\nimport TodoContext, { manageTodo } from \"./context\";\nimport GoBack from \"../../common/goback\";\nimport List from \"./list\";\n\nimport \"../../../style/style-todo.css\";\n\nconst storage = localStorage.getItem(\"todoDB\");\nlet initial = [];\nif (storage) {\n    initial = JSON.parse(storage);\n}\nconst initialState = initial;\n\nconst Todo: React.FC = () => {\n    const [newTodo, setNewTodo] = useState(\"\");\n    const [state, dispatch] = useReducer(manageTodo, initialState);\n\n\n    useEffect(() => {\n        localStorage.setItem(\"todoDB\", JSON.stringify(state));\n    }, [state, state.length]);\n\n\n    return (\n        <div className=\"container\">\n            <TodoContext.Provider value={{ state, dispatch }}>\n                <div className=\"flex-todo\">\n                    <GoBack />\n                    <List />\n                    <div className=\"add-section\">\n                        <input value={newTodo} onChange={(event) => { setNewTodo(event.currentTarget.value) }} className=\"input-add\" placeholder=\"Add a new todo\" />\n                        <button className=\"green-btn\" onClick={() => { dispatch({ type: \"ADD_TODO\", value: newTodo }); setNewTodo(\"\"); }}>ADD</button>\n                    </div>\n                </div>\n            </TodoContext.Provider>\n        </div >\n    );\n}\n\nexport default Todo;\n","import React from \"react\";\n\nimport TodoInterface from \"./interface\";\n\nconst Item = (props: { elem: TodoInterface, removeTask: Function, setCompletedTask: Function }) => {\n    const { elem, removeTask, setCompletedTask } = props;\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                borderBottom: \"1px solid #FFF\",\n            }}\n        >\n            <input\n                className=\"task-status\"\n                type=\"checkbox\"\n                onChange={() => setCompletedTask(elem.id)}\n                checked={elem.isCompleted}\n            ></input>\n            <label className={\"task-name\" + (elem.isCompleted ? \" complete\" : \"\")}>\n                {elem.title}\n            </label>\n            <button\n                className=\"task-delete\"\n                onClick={() => removeTask(elem.id)}\n            ></button>\n        </div>\n    );\n};\n\nexport default Item;\n","import React from \"react\";\nimport EmptyList from \"../../common/emptyList\";\nimport Item from \"./item\";\nimport TodoInterface from \"./interface\";\n\n\nconst List = (props: { removeTask: Function, setCompletedTask: Function, todoList: TodoInterface[] }) => {\n  const { removeTask, setCompletedTask, todoList } = props;\n\n  return (\n    <div className=\"content\">\n      {(todoList as TodoInterface[]).map((el: TodoInterface) => {\n        return (<Item elem={el} removeTask={removeTask} setCompletedTask={setCompletedTask} />)\n      })}\n\n      {todoList.length === 0 && <EmptyList />}\n    </div>\n  );\n};\n\nexport default List;\n","import React, { useEffect, useState } from \"react\";\nimport TodoInterface from \"./interface\";\nimport GoBack from \"../../common/goback\";\nimport List from \"./list\";\n\nimport \"../../../style/style-todo.css\";\n\n\n\n/**\n * The basic idea is to propagate props to children nad manage the state in this component root\n */\nconst Todo: React.FC = () => {\n    const [newTodo, setNewTodo] = useState(\"\");\n    const [todoList, setTodoList] = useState<TodoInterface[] | []>([]);\n\n\n    useEffect(() => {\n        const storage = localStorage.getItem(\"todoDB\");\n        let initial = [];\n        if (storage) {\n            initial = JSON.parse(storage);\n        }\n        const initialState = initial;\n        setTodoList(initialState)\n    }, []);\n\n\n    useEffect(() => {\n        localStorage.setItem(\"todoDB\", JSON.stringify(todoList));\n    }, [todoList, todoList.length]);\n\n    /**\n     * Add a new task in todo list\n     * @param newVal string with title of the new todo item\n     */\n    const addNewTodo = (newVal: string) => {\n        const cloneList = [...todoList];\n        const newTodo = {\n            id: todoList.length === 0 ? 1 : Math.max.apply(Math, (todoList as TodoInterface[]).map(function (o) { return o.id; })) + 1,\n            title: newVal,\n            isCompleted: false\n        }\n        cloneList.push(newTodo);\n        setTodoList(cloneList);\n        setNewTodo(\"\");\n    }\n\n    const removeTask = (id: number) => {\n        const cloneList = [...todoList];\n        const filtered = cloneList.filter(el => el.id !== id)\n        setTodoList(filtered);\n    }\n\n    const setCompletedTask = (id: number) => {\n        const cloneState = [...todoList];\n        let currentTask = cloneState.find(el => el.id === id);\n        if (currentTask)\n            currentTask[\"isCompleted\"] = !currentTask?.isCompleted;\n        setTodoList(cloneState);\n    }\n\n\n    return (\n        <div className=\"container\">\n            <div className=\"flex-todo\">\n                <GoBack />\n                <List removeTask={removeTask} setCompletedTask={setCompletedTask} todoList={todoList} />\n                <div className=\"add-section\">\n                    <input value={newTodo} onChange={(event) => { setNewTodo(event.currentTarget.value) }} className=\"input-add\" placeholder=\"Add a new todo\" />\n                    <button className=\"green-btn\" onClick={() => addNewTodo(newTodo)}>ADD</button>\n                </div>\n            </div>\n        </div >\n    );\n}\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { todoListState } from \"./index\";\nimport TodoInterface from \"./interface\";\n\nconst List = () => {\n\n    const [newTodo, setNewTodo] = useState(\"\");\n    const todoList = useRecoilValue(todoListState);\n    const addTodo = useSetRecoilState(todoListState);\n\n    return (\n        <div className=\"add-section\">\n            <input value={newTodo} onChange={(event) => { setNewTodo(event.currentTarget.value) }} className=\"input-add\" placeholder=\"Add a new todo\" />\n            <button className=\"green-btn\" onClick={() => {\n                const cloneState = [...todoList];\n                const newItem = {\n                    id: todoList.length === 0 ? 1 : Math.max.apply(Math, (todoList as TodoInterface[]).map(function (o) { return o.id; })) + 1,\n                    title: newTodo,\n                    isCompleted: false\n                }\n                cloneState.push(newItem);\n\n                addTodo(cloneState);\n                setNewTodo(\"\");\n            }}>ADD</button>\n        </div>\n    );\n};\n\nexport default List;\n","import React from \"react\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport { todoListState } from \"./index\";\nimport TodoInterface from \"./interface\";\n\nconst Item = (props: { elem: TodoInterface }) => {\n    const { elem } = props;\n\n    //const setCompletedTask = useSetRecoilState(todoListState);\n    const removeTask = useSetRecoilState(todoListState);\n    const [todoList, setTodoList] = useRecoilState(todoListState);\n\n    const replaceItemAtIndex = (arr: TodoInterface[], index: number, newValue: TodoInterface) => {\n        return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n    }\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                borderBottom: \"1px solid #FFF\",\n            }}\n        >\n            <input\n                className=\"task-status\"\n                type=\"checkbox\"\n                onChange={() => {\n                    const index = todoList.findIndex((el) => el.id === elem.id);\n                    const changedTodo: TodoInterface = {\n                        id: todoList[index].id,\n                        title: todoList[index].title,\n                        isCompleted: !todoList[index].isCompleted,\n                    }\n                    const newList = replaceItemAtIndex(todoList, index, changedTodo);\n\n                    setTodoList(newList);\n                }\n                }\n                checked={elem.isCompleted}\n            ></input>\n            <label className={\"task-name\" + (elem.isCompleted ? \" complete\" : \"\")}>\n                {elem.title}\n            </label>\n            <button\n                className=\"task-delete\"\n                onClick={() => {\n                    const filtered = todoList.filter(el => el.id !== elem.id)\n                    removeTask(filtered)\n                }}\n            ></button>\n        </div>\n    );\n};\n\nexport default Item;\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { todoListState } from \"./index\";\nimport EmptyList from \"../../common/emptyList\";\nimport Item from \"./item\";\nimport TodoInterface from \"./interface\";\n\n\nconst List = () => {\n\n  const todoList = useRecoilValue(todoListState);\n\n  return (\n    <div className=\"content\">\n      {(todoList as TodoInterface[]).map((el: TodoInterface) => {\n        return (<Item elem={el} />)\n      })}\n\n      {todoList.length === 0 && <EmptyList />}\n    </div>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { atom, RecoilRoot } from \"recoil\";\nimport TodoInterface from \"./interface\";\nimport GoBack from \"../../common/goback\";\nimport Add from \"./add\";\nimport List from \"./list\";\n\nimport \"../../../style/style-todo.css\";\n\nconst storage = localStorage.getItem(\"todoDB\");\nlet initial = [];\nif (storage) {\n    initial = JSON.parse(storage);\n}\nconst initialState = initial;\n\nexport const todoListState = atom<TodoInterface[] | []>({\n    key: \"todoList\",\n    default: initialState\n});\n\n/**\n * The basic idea is to propagate props to children nad manage the state in this component root\n */\nconst Todo: React.FC = () => {\n\n    return (\n        <RecoilRoot>\n            <div className=\"container\">\n                <div className=\"flex-todo\">\n                    <GoBack />\n                    <List />\n                    <Add />\n                </div>\n            </div >\n        </RecoilRoot>\n    );\n}\n\nexport default Todo;\n","import React from \"react\";\nimport { combineReducers, configureStore, createAction, createReducer } from \"@reduxjs/toolkit\";\nimport TodoInterface from \"./interface\";\n\nexport const addTodo = createAction<TodoInterface[]>('ADD_TODO');\nexport const removeTodo = createAction<TodoInterface[]>('REMOVE_TODO');\nexport const completeTodo = createAction<TodoInterface[]>('COMPLETE_TODO');\n\n\nconst storage = localStorage.getItem(\"todoDB\");\nlet initial = [];\nif (storage) {\n    initial = JSON.parse(storage);\n}\nconst initialState = initial;\n\n\nexport const todosReducer = createReducer(initialState, {\n    [addTodo.type]: (state: TodoInterface[] | [], action): TodoInterface[] => {\n        const cloneState = [...state];\n        const newTodo = {\n            id: state.length === 0 ? 1 : Math.max.apply(Math, (state as TodoInterface[]).map(function (o) { return o.id; })) + 1,\n            title: action.value,\n            isCompleted: false\n        }\n        cloneState.push(newTodo);\n        return cloneState;\n    },\n    [removeTodo.type]: (state: TodoInterface[] | [], action): TodoInterface[] => {\n        const filtered = state.filter(el => el.id !== action.id)\n        return filtered;\n    },\n    [completeTodo.type]: (state: TodoInterface[] | [], action): TodoInterface[] => {\n        let currentTask = state.find(el => el.id === action.id);\n        if (currentTask)\n            currentTask[\"isCompleted\"] = !currentTask?.isCompleted;\n\n        return state;\n    },\n})\n\nconst rootReducer = combineReducers({\n    todoList: todosReducer\n});\n\nexport const store = configureStore({\n    reducer: rootReducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nconst Add = () => {\n\n    const [newTodo, setNewTodo] = useState(\"\");\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"add-section\">\n            <input value={newTodo} onChange={(event) => { setNewTodo(event.currentTarget.value) }} className=\"input-add\" placeholder=\"Add a new todo\" />\n            <button className=\"green-btn\" onClick={() => { dispatch({ type: \"ADD_TODO\", value: newTodo }); setNewTodo(\"\") }}>ADD</button>\n        </div>\n    );\n};\n\nexport default Add;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TodoInterface from \"./interface\";\n\nconst Item = (props: { elem: TodoInterface }) => {\n    const dispatch = useDispatch();\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                borderBottom: \"1px solid #FFF\",\n            }}\n        >\n            <input\n                className=\"task-status\"\n                type=\"checkbox\"\n                onChange={() => {\n                    dispatch({ type: \"COMPLETE_TODO\", id: props.elem.id });\n                }}\n                checked={props.elem.isCompleted}\n            ></input>\n            <label className={\"task-name\" + (props.elem.isCompleted ? \" complete\" : \"\")}>\n                {props.elem.title}\n            </label>\n            <button\n                className=\"task-delete\"\n                onClick={() => {\n                    dispatch({ type: \"REMOVE_TODO\", id: props.elem.id });\n                }}\n            ></button>\n        </div>\n    );\n};\n\nexport default Item;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"./reducer\";\nimport EmptyList from \"../../common/emptyList\";\nimport TodoInterface from \"./interface\";\nimport Item from \"./item\";\n\nconst List = () => {\n\n  const todoList = useSelector((state: RootState) => state.todoList);\n\n\n  useEffect(() => {\n    localStorage.setItem(\"todoDB\", JSON.stringify(todoList));\n  }, [todoList, todoList.length]);\n\n\n  return (\n    <div className=\"content\">\n      {(todoList as TodoInterface[]).map((el: TodoInterface) => {\n        return (<Item key={\"todo_\" + el.id} elem={el} />)\n      })}\n\n      {todoList.length === 0 && <EmptyList />}\n    </div>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./reducer\";\nimport AddTodo from \"./add\";\nimport GoBack from \"../../common/goback\";\nimport List from \"./list\";\n\nimport \"../../../style/style-todo.css\";\n\n\nconst Todo: React.FC = () => {\n\n    return (\n        <div className=\"container\">\n            <Provider store={store}>\n                <div className=\"flex-todo\">\n                    <GoBack />\n                    <List />\n                    <AddTodo />\n                </div>\n            </Provider>\n        </div >\n    );\n}\n\nexport default Todo;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Chooser from \"./components/chooser/index\";\n\nimport AkitaTodo from \"./components/akita/todo/index\";\nimport ContextTodo from \"./components/context/todo/index\";\nimport DrillingTodo from \"./components/drilling/todo/index\";\nimport RecoilTodo from \"./components/recoil/todo/index\";\nimport ReduxTodo from \"./components/redux/todo/index\";\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\">\n          <Chooser />\n        </Route>\n        <Route exact path=\"/akita\">\n          <AkitaTodo />\n        </Route>\n        <Route exact path=\"/drilling\">\n          <DrillingTodo />\n        </Route>\n        <Route exact path=\"/context\">\n          <ContextTodo />\n        </Route>\n        <Route exact path=\"/redux\">\n          <ReduxTodo />\n        </Route>\n        <Route exact path=\"/recoil\">\n          <RecoilTodo />\n        </Route>\n        <Route path=\"*\">\n          <div>404</div>\n        </Route>\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}