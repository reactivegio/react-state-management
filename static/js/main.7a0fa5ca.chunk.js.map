{"version":3,"sources":["components/chooser/index.tsx","components/context/todo/context.tsx","components/common/goback.tsx","components/common/emptyList.tsx","components/context/todo/item.tsx","components/context/todo/list.tsx","components/context/todo/index.tsx","components/drilling/todo/item.tsx","components/drilling/todo/list.tsx","components/drilling/todo/index.tsx","components/recoil/todo/add.tsx","components/recoil/todo/item.tsx","components/recoil/todo/list.tsx","components/recoil/todo/index.tsx","components/redux/todo/reducer.tsx","components/redux/todo/add.tsx","components/redux/todo/item.tsx","components/redux/todo/list.tsx","components/redux/todo/index.tsx","App.tsx","index.tsx"],"names":["Chooser","to","className","manageTodo","state","action","type","newTodo","id","length","Math","max","apply","map","o","title","value","isCompleted","push","filter","el","cloneState","currentTask","find","TodoContext","createContext","dispatch","GoBack","style","margin","EmptyList","display","justifyContent","flexDirection","alignItems","height","Item","props","borderBottom","onChange","actionDispatch","elem","checked","onClick","List","todoList","useContext","storage","localStorage","getItem","initial","JSON","parse","initialState","Todo","useState","setNewTodo","useReducer","useEffect","setItem","stringify","Provider","event","currentTarget","placeholder","removeTask","setCompletedTask","setTodoList","filtered","newVal","cloneList","addNewTodo","useRecoilValue","todoListState","addTodo","useSetRecoilState","newItem","useRecoilState","index","findIndex","changedTodo","newList","arr","newValue","slice","replaceItemAtIndex","atom","key","default","createAction","removeTodo","completeTodo","todosReducer","createReducer","rootReducer","combineReducers","store","configureStore","reducer","useDispatch","useSelector","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a0fa5ca.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./style.css\";\n\n/**\n * It directs you to the chosen state management\n */\nconst Chooser = () => {\n    return (\n        <div>\n            <h1>STATE MANAGEMENT</h1>\n            <Link to=\"drilling\"><button className=\"purple\">Drilling component</button></Link>\n            <Link to=\"context\"><button className=\"pink\">React Context</button></Link>\n            <Link to=\"redux\"><button className=\"red\">Redux</button></Link>\n            <Link to=\"recoil\"><button className=\"orange\">Recoil</button></Link>\n        </div>\n    )\n}\n\nexport default Chooser;","import React, { createContext } from \"react\";\n\nexport type Action = { type: \"ADD_TODO\", value: string } | { type: \"REMOVE_TODO\", id: number } | { type: \"COMPLETE_TODO\", id: number };\nexport type Dispatch = (action: Action) => void;\n\nexport interface TodoState {\n    id: number,\n    title: string,\n    isCompleted: boolean\n}\n\nconst TodoContext = createContext<{ state: TodoState[] | [], dispatch: Dispatch }>({ state: [], dispatch: () => { } });\n\nexport const manageTodo = (state: TodoState[], action: Action) => {\n    switch (action.type) {\n        case \"ADD_TODO\": {\n            const newTodo = {\n                id: state.length === 0 ? 1 : Math.max.apply(Math, state.map(function (o) { return o.id; })) + 1,\n                title: action.value,\n                isCompleted: false\n            }\n            state.push(newTodo);\n            return state;\n        }\n        case \"REMOVE_TODO\": {\n            const filtered = state.filter(el => el.id !== action.id)\n            return filtered\n        }\n        case \"COMPLETE_TODO\": {\n            const cloneState = [...state];\n            let currentTask = cloneState.find(el => el.id === action.id);\n            if (currentTask)\n                currentTask[\"isCompleted\"] = !currentTask?.isCompleted;\n\n            return cloneState;\n        }\n        default:\n            return state\n    }\n}\n\nexport default TodoContext;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nconst GoBack: React.FC = () => {\n    return (\n        <Link to=\"/\">\n            <div style={{\n                margin: \"10px 0\"\n            }}>⟵ Back to the state management list</div>\n        </Link>\n    );\n};\n\nexport default GoBack;\n\n","import React from \"react\";\n\nconst EmptyList: React.FC = () => {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                height: \"100%\",\n            }}\n        >\n            <div>NO TASK FOUND</div>\n        </div>\n    );\n};\n\nexport default EmptyList;\n","import React from \"react\";\n\nimport { TodoState, Dispatch } from \"./context\";\n\nconst Item = (props: { elem: TodoState, actionDispatch: Dispatch }) => {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                borderBottom: \"1px solid #FFF\",\n            }}\n        >\n            <input\n                className=\"task-status\"\n                type=\"checkbox\"\n                onChange={() => {\n                    props.actionDispatch({ type: \"COMPLETE_TODO\", id: props.elem.id });\n                }}\n                checked={props.elem.isCompleted}\n            ></input>\n            <label className={\"task-name\" + (props.elem.isCompleted ? \" complete\" : \"\")}>\n                {props.elem.title}\n            </label>\n            <button\n                className=\"task-delete\"\n                onClick={() => {\n                    props.actionDispatch({ type: \"REMOVE_TODO\", id: props.elem.id });\n                }}\n            ></button>\n        </div>\n    );\n};\n\nexport default Item;\n","import React, { useContext } from \"react\";\nimport EmptyList from \"../../common/emptyList\";\nimport Item from \"./item\";\nimport TodoContext, { TodoState } from \"./context\";\n\nconst List = () => {\n  const todoList = useContext(TodoContext);\n\n  return (\n    <div className=\"content\">\n      {(todoList.state as TodoState[]).map((el: TodoState) => {\n        return (<Item elem={el} actionDispatch={todoList.dispatch} />)\n      })}\n\n      {todoList.state.length === 0 && <EmptyList />}\n    </div>\n  );\n};\n\nexport default List;\n","import React, { useEffect, useReducer, useState } from \"react\";\nimport TodoContext, { manageTodo } from \"./context\";\nimport GoBack from \"../../common/goback\";\nimport List from \"./list\";\n\nimport \"../../../style/style-todo.css\";\n\nconst storage = localStorage.getItem(\"todoDB\");\nlet initial = [];\nif (storage) {\n    initial = JSON.parse(storage);\n}\nconst initialState = initial;\n\nconst Todo: React.FC = () => {\n    const [newTodo, setNewTodo] = useState(\"\");\n    const [state, dispatch] = useReducer(manageTodo, initialState);\n\n\n    useEffect(() => {\n        localStorage.setItem(\"todoDB\", JSON.stringify(state));\n    }, [state, state.length]);\n\n\n    return (\n        <div className=\"container\">\n            <TodoContext.Provider value={{ state, dispatch }}>\n                <div className=\"flex-todo\">\n                    <GoBack />\n                    <List />\n                    <div className=\"add-section\">\n                        <input value={newTodo} onChange={(event) => { setNewTodo(event.currentTarget.value) }} className=\"input-add\" placeholder=\"Add a new todo\" />\n                        <button className=\"green-btn\" onClick={() => { dispatch({ type: \"ADD_TODO\", value: newTodo }); setNewTodo(\"\"); }}>ADD</button>\n                    </div>\n                </div>\n            </TodoContext.Provider>\n        </div >\n    );\n}\n\nexport default Todo;\n","import React from \"react\";\n\nimport TodoInterface from \"./interface\";\n\nconst Item = (props: { elem: TodoInterface, removeTask: Function, setCompletedTask: Function }) => {\n    const { elem, removeTask, setCompletedTask } = props;\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                borderBottom: \"1px solid #FFF\",\n            }}\n        >\n            <input\n                className=\"task-status\"\n                type=\"checkbox\"\n                onChange={() => setCompletedTask(elem.id)}\n                checked={elem.isCompleted}\n            ></input>\n            <label className={\"task-name\" + (elem.isCompleted ? \" complete\" : \"\")}>\n                {elem.title}\n            </label>\n            <button\n                className=\"task-delete\"\n                onClick={() => removeTask(elem.id)}\n            ></button>\n        </div>\n    );\n};\n\nexport default Item;\n","import React from \"react\";\nimport EmptyList from \"../../common/emptyList\";\nimport Item from \"./item\";\nimport TodoInterface from \"./interface\";\n\n\nconst List = (props: { removeTask: Function, setCompletedTask: Function, todoList: TodoInterface[] }) => {\n  const { removeTask, setCompletedTask, todoList } = props;\n\n  return (\n    <div className=\"content\">\n      {(todoList as TodoInterface[]).map((el: TodoInterface) => {\n        return (<Item elem={el} removeTask={removeTask} setCompletedTask={setCompletedTask} />)\n      })}\n\n      {todoList.length === 0 && <EmptyList />}\n    </div>\n  );\n};\n\nexport default List;\n","import React, { useEffect, useState } from \"react\";\nimport TodoInterface from \"./interface\";\nimport GoBack from \"../../common/goback\";\nimport List from \"./list\";\n\nimport \"../../../style/style-todo.css\";\n\n\n\n/**\n * The basic idea is to propagate props to children nad manage the state in this component root\n */\nconst Todo: React.FC = () => {\n    const [newTodo, setNewTodo] = useState(\"\");\n    const [todoList, setTodoList] = useState<TodoInterface[] | []>([]);\n\n\n    useEffect(() => {\n        const storage = localStorage.getItem(\"todoDB\");\n        let initial = [];\n        if (storage) {\n            initial = JSON.parse(storage);\n        }\n        const initialState = initial;\n        setTodoList(initialState)\n    }, []);\n\n\n    useEffect(() => {\n        localStorage.setItem(\"todoDB\", JSON.stringify(todoList));\n    }, [todoList, todoList.length]);\n\n    /**\n     * Add a new task in todo list\n     * @param newVal string with title of the new todo item\n     */\n    const addNewTodo = (newVal: string) => {\n        const cloneList = [...todoList];\n        const newTodo = {\n            id: todoList.length === 0 ? 1 : Math.max.apply(Math, (todoList as TodoInterface[]).map(function (o) { return o.id; })) + 1,\n            title: newVal,\n            isCompleted: false\n        }\n        cloneList.push(newTodo);\n        setTodoList(cloneList);\n        setNewTodo(\"\");\n    }\n\n    const removeTask = (id: number) => {\n        const cloneList = [...todoList];\n        const filtered = cloneList.filter(el => el.id !== id)\n        setTodoList(filtered);\n    }\n\n    const setCompletedTask = (id: number) => {\n        const cloneState = [...todoList];\n        let currentTask = cloneState.find(el => el.id === id);\n        if (currentTask)\n            currentTask[\"isCompleted\"] = !currentTask?.isCompleted;\n        setTodoList(cloneState);\n    }\n\n\n    return (\n        <div className=\"container\">\n            <div className=\"flex-todo\">\n                <GoBack />\n                <List removeTask={removeTask} setCompletedTask={setCompletedTask} todoList={todoList} />\n                <div className=\"add-section\">\n                    <input value={newTodo} onChange={(event) => { setNewTodo(event.currentTarget.value) }} className=\"input-add\" placeholder=\"Add a new todo\" />\n                    <button className=\"green-btn\" onClick={() => addNewTodo(newTodo)}>ADD</button>\n                </div>\n            </div>\n        </div >\n    );\n}\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { todoListState } from \"./index\";\nimport TodoInterface from \"./interface\";\n\nconst List = () => {\n\n    const [newTodo, setNewTodo] = useState(\"\");\n    const todoList = useRecoilValue(todoListState);\n    const addTodo = useSetRecoilState(todoListState);\n\n    return (\n        <div className=\"add-section\">\n            <input value={newTodo} onChange={(event) => { setNewTodo(event.currentTarget.value) }} className=\"input-add\" placeholder=\"Add a new todo\" />\n            <button className=\"green-btn\" onClick={() => {\n                const cloneState = [...todoList];\n                const newItem = {\n                    id: todoList.length === 0 ? 1 : Math.max.apply(Math, (todoList as TodoInterface[]).map(function (o) { return o.id; })) + 1,\n                    title: newTodo,\n                    isCompleted: false\n                }\n                cloneState.push(newItem);\n\n                addTodo(cloneState);\n                setNewTodo(\"\");\n            }}>ADD</button>\n        </div>\n    );\n};\n\nexport default List;\n","import React from \"react\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport { todoListState } from \"./index\";\nimport TodoInterface from \"./interface\";\n\nconst Item = (props: { elem: TodoInterface }) => {\n    const { elem } = props;\n\n    //const setCompletedTask = useSetRecoilState(todoListState);\n    const removeTask = useSetRecoilState(todoListState);\n    const [todoList, setTodoList] = useRecoilState(todoListState);\n\n    const replaceItemAtIndex = (arr: TodoInterface[], index: number, newValue: TodoInterface) => {\n        return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n    }\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                borderBottom: \"1px solid #FFF\",\n            }}\n        >\n            <input\n                className=\"task-status\"\n                type=\"checkbox\"\n                onChange={() => {\n                    const index = todoList.findIndex((el) => el.id === elem.id);\n                    const changedTodo: TodoInterface = {\n                        id: todoList[index].id,\n                        title: todoList[index].title,\n                        isCompleted: !todoList[index].isCompleted,\n                    }\n                    const newList = replaceItemAtIndex(todoList, index, changedTodo);\n\n                    setTodoList(newList);\n                }\n                }\n                checked={elem.isCompleted}\n            ></input>\n            <label className={\"task-name\" + (elem.isCompleted ? \" complete\" : \"\")}>\n                {elem.title}\n            </label>\n            <button\n                className=\"task-delete\"\n                onClick={() => {\n                    const filtered = todoList.filter(el => el.id !== elem.id)\n                    removeTask(filtered)\n                }}\n            ></button>\n        </div>\n    );\n};\n\nexport default Item;\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { todoListState } from \"./index\";\nimport EmptyList from \"../../common/emptyList\";\nimport Item from \"./item\";\nimport TodoInterface from \"./interface\";\n\n\nconst List = () => {\n\n  const todoList = useRecoilValue(todoListState);\n\n  return (\n    <div className=\"content\">\n      {(todoList as TodoInterface[]).map((el: TodoInterface) => {\n        return (<Item elem={el} />)\n      })}\n\n      {todoList.length === 0 && <EmptyList />}\n    </div>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { atom, RecoilRoot } from \"recoil\";\nimport TodoInterface from \"./interface\";\nimport GoBack from \"../../common/goback\";\nimport Add from \"./add\";\nimport List from \"./list\";\n\nimport \"../../../style/style-todo.css\";\n\nconst storage = localStorage.getItem(\"todoDB\");\nlet initial = [];\nif (storage) {\n    initial = JSON.parse(storage);\n}\nconst initialState = initial;\n\nexport const todoListState = atom<TodoInterface[] | []>({\n    key: \"todoList\",\n    default: initialState\n});\n\n/**\n * The basic idea is to propagate props to children nad manage the state in this component root\n */\nconst Todo: React.FC = () => {\n\n    return (\n        <RecoilRoot>\n            <div className=\"container\">\n                <div className=\"flex-todo\">\n                    <GoBack />\n                    <List />\n                    <Add />\n                </div>\n            </div >\n        </RecoilRoot>\n    );\n}\n\nexport default Todo;\n","import React from \"react\";\nimport { combineReducers, configureStore, createAction, createReducer } from \"@reduxjs/toolkit\";\nimport TodoInterface from \"./interface\";\n\nexport const addTodo = createAction<TodoInterface[]>('ADD_TODO');\nexport const removeTodo = createAction<TodoInterface[]>('REMOVE_TODO');\nexport const completeTodo = createAction<TodoInterface[]>('COMPLETE_TODO');\n\n\nconst storage = localStorage.getItem(\"todoDB\");\nlet initial = [];\nif (storage) {\n    initial = JSON.parse(storage);\n}\nconst initialState = initial;\n\n\nexport const todosReducer = createReducer(initialState, {\n    [addTodo.type]: (state: TodoInterface[] | [], action): TodoInterface[] => {\n        const cloneState = [...state];\n        const newTodo = {\n            id: state.length === 0 ? 1 : Math.max.apply(Math, (state as TodoInterface[]).map(function (o) { return o.id; })) + 1,\n            title: action.value,\n            isCompleted: false\n        }\n        cloneState.push(newTodo);\n        return cloneState;\n    },\n    [removeTodo.type]: (state: TodoInterface[] | [], action): TodoInterface[] => {\n        const filtered = state.filter(el => el.id !== action.id)\n        return filtered;\n    },\n    [completeTodo.type]: (state: TodoInterface[] | [], action): TodoInterface[] => {\n        let currentTask = state.find(el => el.id === action.id);\n        if (currentTask)\n            currentTask[\"isCompleted\"] = !currentTask?.isCompleted;\n\n        return state;\n    },\n})\n\nconst rootReducer = combineReducers({\n    todoList: todosReducer\n});\n\nexport const store = configureStore({\n    reducer: rootReducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nconst List = () => {\n\n    const [newTodo, setNewTodo] = useState(\"\");\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"add-section\">\n            <input value={newTodo} onChange={(event) => { setNewTodo(event.currentTarget.value) }} className=\"input-add\" placeholder=\"Add a new todo\" />\n            <button className=\"green-btn\" onClick={() => { dispatch({ type: \"ADD_TODO\", value: newTodo }); setNewTodo(\"\") }}>ADD</button>\n        </div>\n    );\n};\n\nexport default List;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TodoInterface from \"./interface\";\n\nconst Item = (props: { elem: TodoInterface }) => {\n    const dispatch = useDispatch();\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                borderBottom: \"1px solid #FFF\",\n            }}\n        >\n            <input\n                className=\"task-status\"\n                type=\"checkbox\"\n                onChange={() => {\n                    dispatch({ type: \"COMPLETE_TODO\", id: props.elem.id });\n                }}\n                checked={props.elem.isCompleted}\n            ></input>\n            <label className={\"task-name\" + (props.elem.isCompleted ? \" complete\" : \"\")}>\n                {props.elem.title}\n            </label>\n            <button\n                className=\"task-delete\"\n                onClick={() => {\n                    dispatch({ type: \"REMOVE_TODO\", id: props.elem.id });\n                }}\n            ></button>\n        </div>\n    );\n};\n\nexport default Item;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"./reducer\";\nimport EmptyList from \"../../common/emptyList\";\nimport TodoInterface from \"./interface\";\nimport Item from \"./item\";\n\nconst List = () => {\n\n  const todoList = useSelector((state: RootState) => state.todoList);\n\n\n  useEffect(() => {\n    localStorage.setItem(\"todoDB\", JSON.stringify(todoList));\n  }, [todoList, todoList.length]);\n\n\n  return (\n    <div className=\"content\">\n      {(todoList as TodoInterface[]).map((el: TodoInterface) => {\n        return (<Item key={\"todo_\" + el.id} elem={el} />)\n      })}\n\n      {todoList.length === 0 && <EmptyList />}\n    </div>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./reducer\";\nimport AddTodo from \"./add\";\nimport GoBack from \"../../common/goback\";\nimport List from \"./list\";\n\nimport \"../../../style/style-todo.css\";\n\n\nconst Todo: React.FC = () => {\n\n    return (\n        <div className=\"container\">\n            <Provider store={store}>\n                <div className=\"flex-todo\">\n                    <GoBack />\n                    <List />\n                    <AddTodo />\n                </div>\n            </Provider>\n        </div >\n    );\n}\n\nexport default Todo;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Chooser from \"./components/chooser/index\";\nimport ContextTodo from \"./components/context/todo/index\";\nimport DrillingTodo from \"./components/drilling/todo/index\";\nimport RecoilTodo from \"./components/recoil/todo/index\";\nimport ReduxTodo from \"./components/redux/todo/index\";\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Chooser />\n        </Route>\n        <Route exact path=\"/drilling\">\n          <DrillingTodo />\n        </Route>\n        <Route exact path=\"/context\">\n          <ContextTodo />\n        </Route>\n        <Route exact path=\"/redux\">\n          <ReduxTodo />\n        </Route>\n        <Route exact path=\"/recoil\">\n          <RecoilTodo />\n        </Route>\n        <Route path=\"*\">\n          <div>404</div>\n        </Route>\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}